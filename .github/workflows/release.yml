name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Build frontend
        run: npm run build

      - name: Prepare curated release contents
        run: |
          set -e
          RELEASE_DIR=release
          mkdir -p "$RELEASE_DIR"

          # Frontend build output
          if [ -d dist ]; then
            cp -r dist "$RELEASE_DIR/"
          fi

          # Backend API (both entry options for safety)
          if [ -f api.cjs ]; then
            cp api.cjs "$RELEASE_DIR/"
          fi
          if [ -d server ]; then
            cp -r server "$RELEASE_DIR/"
          fi

          # Plugin templates and examples
          if [ -d plugin-templates ]; then
            cp -r plugin-templates "$RELEASE_DIR/"
          fi
          if [ -d example-plugin ]; then
            cp -r example-plugin "$RELEASE_DIR/"
          fi

          # Docs and top-level metadata
          for f in README.md README-DISTRIBUTION.md CHANGELOG.md LICENSE.txt PLUGIN-PACKAGE-SPEC.md PLUGIN-UPLOAD-SYSTEM.md PLUGIN-UPLOAD-IMPLEMENTATION.md PLUGIN-PACKAGE-SPEC.md; do
            if [ -f "$f" ]; then cp "$f" "$RELEASE_DIR/"; fi
          done
          if [ -d docs ]; then
            cp -r docs "$RELEASE_DIR/docs"
          fi

          # Example env/config
          if [ -f .env.example ]; then
            cp .env.example "$RELEASE_DIR/.env.example"
          fi
          if [ -f config.json ]; then
            cp config.json "$RELEASE_DIR/config.json"
          fi

          # Optional deployment helpers
          shopt -s nullglob
          cp deploy*.bat "$RELEASE_DIR/" 2>/dev/null || true
          cp deploy*.sh "$RELEASE_DIR/" 2>/dev/null || true
          shopt -u nullglob

          # Create zip only from curated release directory
          (cd "$RELEASE_DIR" && zip -r ../field-service-plugins-${{ github.ref_name }}.zip .)

      - name: Package Time Clock plugin (if present)
        run: |
          set -e
          if [ -d time-clock-plugin-package ]; then
            (cd time-clock-plugin-package && zip -r ../time-clock-plugin.zip .)
          elif [ -f time-clock-plugin.zip ]; then
            echo "Using existing time-clock-plugin.zip"
          else
            echo "No time-clock plugin found to package."
          fi

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          artifacts: field-service-plugins-${{ github.ref_name }}.zip,time-clock-plugin.zip
          artifactErrorsFailBuild: true
          generateReleaseNotes: true
