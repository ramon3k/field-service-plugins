import React, { useEffect, useState, useMemo } from 'react'
import { listLicenses, createLicense, updateLicense, deleteLicense } from '../api-sql-license'
import { siteApiService } from '../SiteApiService'
import { customerApiService } from '../services/CustomerApiService'
import type { License, Site, Customer } from '../types'
import { LicenseEditModal } from './LicenseEditModal'
import { arrayToCSV, formatDateForCSV } from '../utils/csvExport'

interface LicenseFilters {
  search: string
  customer: string
  site: string
  status: string
  vendor: string
  softwareType: string
}

const emptyFilters: LicenseFilters = {
  search: '',
  customer: 'All',
  site: 'All',
  status: 'All',
  vendor: 'All',
  softwareType: 'All'
}

export default function LicensesPage() {
  const [items, setItems] = useState<License[]>([])
  const [sites, setSites] = useState<Site[]>([])
  const [customers, setCustomers] = useState<Customer[]>([])
  const [editingLicense, setEditingLicense] = useState<License | null>(null)
  const [isEditModalOpen, setIsEditModalOpen] = useState(false)
  const [filters, setFilters] = useState<LicenseFilters>(emptyFilters)
  const [form, setForm] = useState<Partial<License>>({ 
    Customer: '', 
    Site: '', 
    SoftwareName: '',
    LicenseType: 'Subscription',
    Status: 'Active'
  })

  async function refresh(){
    try {
      console.log('LicensesPage.refresh: Loading licenses, sites, and customers...')
      const [licensesData, sitesData, customersData] = await Promise.all([
        listLicenses(),
        siteApiService.getSites(),
        customerApiService.getCustomers()
      ])
      
      // Check and update license statuses automatically based on expiration dates
      const statusesUpdated = await updateLicenseStatuses(licensesData)
      
      // If statuses were updated, reload the data to get the latest status values
      if (statusesUpdated) {
        console.log('LicensesPage.refresh: Reloading licenses after status updates...')
        const updatedLicensesData = await listLicenses()
        setItems(updatedLicensesData)
      } else {
        setItems(licensesData)
      }
      
      setSites(sitesData)
      setCustomers(customersData)
      console.log('LicensesPage.refresh: Loaded', licensesData.length, 'licenses')
    } catch (error) {
      console.error('LicensesPage.refresh: Error loading data:', error)
    }
  }

  useEffect(() => { refresh() }, [])

  function update<K extends keyof License>(k: K, v: any){ 
    setForm(p => ({...p, [k]: v})) 
  }

  const filteredSites = sites.filter(s => !form.Customer || s.Customer === form.Customer)

  async function save(e: React.FormEvent){
    e.preventDefault()
    try {
      console.log('LicensesPage.save: Creating license:', form)
      await createLicense(form)
      setForm({ 
        Customer: '', 
        Site: '', 
        SoftwareName: '',
        LicenseType: 'Subscription',
        Status: 'Active'
      })
      refresh()
    } catch (error) {
      console.error('LicensesPage.save: Error creating license:', error)
      alert('Error creating license: ' + (error as Error).message)
    }
  }

  function startEdit(license: License) {
    setEditingLicense({...license})
    setIsEditModalOpen(true)
  }

  function startAddNew() {
    // Create a new license with default values
    const newLicense: License = {
      LicenseID: '', // Will be generated by server
      Customer: '',
      Site: '',
      SoftwareName: '',
      SoftwareVersion: '',
      LicenseType: 'Subscription',
      LicenseCount: 1,
      UsedCount: 0,
      Vendor: '',
      Status: 'Active'
    }
    setEditingLicense(newLicense)
    setIsEditModalOpen(true)
  }

  function closeEditModal() {
    setEditingLicense(null)
    setIsEditModalOpen(false)
  }

  async function saveEdit(license: License) {
    try {
      if (!license.LicenseID || license.LicenseID === '') {
        // Creating new license
        console.log('LicensesPage.saveEdit: Creating new license:', license.SoftwareName)
        await createLicense(license)
      } else {
        // Updating existing license
        console.log('LicensesPage.saveEdit: Updating license:', license.LicenseID)
        await updateLicense(license.LicenseID, license)
      }
      refresh()
    } catch (error) {
      console.error('LicensesPage.saveEdit: Error saving license:', error)
      alert('Error saving license: ' + (error as Error).message)
      throw error
    }
  }

  async function deleteLicenseHandler(licenseId: string, softwareName: string) {
    try {
      console.log('LicensesPage.deleteLicenseHandler: Deleting license:', licenseId)
      await deleteLicense(licenseId)
      refresh()
    } catch (error) {
      console.error('LicensesPage.deleteLicenseHandler: Error deleting license:', error)
      alert('Error deleting license: ' + (error as Error).message)
      throw error
    }
  }

  // Helper function to format expiration dates
  const formatDate = (dateString?: string) => {
    if (!dateString) return 'N/A'
    try {
      return new Date(dateString).toLocaleDateString()
    } catch {
      return dateString
    }
  }

  // Helper function to calculate proper license status based on expiration dates
  const calculateLicenseStatus = (expirationDate?: string, servicePlanExpiration?: string): string => {
    const now = new Date()
    const thirtyDaysFromNow = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
    
    // Check if license has expired
    if (expirationDate && new Date(expirationDate) < now) {
      return 'Expired'
    }
    
    // Check if service plan has expired
    if (servicePlanExpiration && new Date(servicePlanExpiration) < now) {
      return 'Service Plan Expired'
    }
    
    // Check if license is expiring soon (within 30 days)
    if (expirationDate && new Date(expirationDate) <= thirtyDaysFromNow) {
      return 'Expiring Soon'
    }
    
    // Check if service plan is expiring soon (within 30 days)
    if (servicePlanExpiration && new Date(servicePlanExpiration) <= thirtyDaysFromNow) {
      return 'Service Plan Expiring'
    }
    
    return 'Active'
  }

  // Helper function to determine status color
  const getStatusColor = (status: string, expirationDate?: string, servicePlanExpiration?: string) => {
    // Manually set Inactive status - display in red
    if (status === 'Inactive') return '#ff4444'
    
    if (status === 'Expired' || status === 'Service Plan Expired') return '#ff4444'
    if (status === 'Expiring Soon' || status === 'Service Plan Expiring') return '#ff8800'
    
    const now = new Date()
    const thirtyDaysFromNow = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
    
    // Check license expiration
    if (expirationDate && new Date(expirationDate) <= thirtyDaysFromNow) {
      return '#ff8800' // License expiring within 30 days
    }
    
    // Check service plan expiration
    if (servicePlanExpiration && new Date(servicePlanExpiration) <= thirtyDaysFromNow) {
      return '#ff8800' // Service plan expiring within 30 days
    }
    
    return '#00aa44'
  }

  // Function to automatically update license statuses based on expiration dates
  const updateLicenseStatuses = async (licenses: License[]) => {
    const licenseUpdates: Promise<License>[] = []
    
    for (const license of licenses) {
      // Skip licenses that are manually set to "Inactive" - these should not be auto-updated
      if (license.Status === 'Inactive') {
        continue
      }
      
      const calculatedStatus = calculateLicenseStatus(license.ExpirationDate, license.ServicePlanExpiration)
      
      // Only update if the calculated status is different from current status
      if (license.Status !== calculatedStatus) {
        console.log(`LicensesPage.updateLicenseStatuses: Updating status for ${license.SoftwareName} from '${license.Status}' to '${calculatedStatus}'`)
        
        const updatedLicense = { ...license, Status: calculatedStatus }
        licenseUpdates.push(updateLicense(license.LicenseID!, updatedLicense))
      }
    }
    
    if (licenseUpdates.length > 0) {
      try {
        await Promise.all(licenseUpdates)
        console.log(`LicensesPage.updateLicenseStatuses: Updated ${licenseUpdates.length} license statuses`)
        return true // Indicate that updates were made
      } catch (error) {
        console.error('LicensesPage.updateLicenseStatuses: Error updating license statuses:', error)
        return false
      }
    }
    
    return false // No updates needed
  }

  // Filter helper function
  const setFilter = (patch: Partial<LicenseFilters>) => {
    setFilters(f => ({ ...f, ...patch, ...(patch.customer ? { site: 'All' } : null) }))
  }

  const resetFilters = () => setFilters(emptyFilters)

  // Derived dropdown options
  const customerOptions = useMemo(() => {
    const set = new Set<string>()
    items.forEach(item => { if (item.Customer) set.add(item.Customer) })
    return Array.from(set).sort()
  }, [items])

  const siteOptions = useMemo(() => {
    const set = new Set<string>()
    items.forEach(item => {
      if (filters.customer === 'All' || item.Customer === filters.customer) {
        if (item.Site) set.add(item.Site)
      }
    })
    return Array.from(set).sort()
  }, [items, filters.customer])

  const vendorOptions = useMemo(() => {
    const set = new Set<string>()
    items.forEach(item => { if (item.Vendor) set.add(item.Vendor) })
    return Array.from(set).sort()
  }, [items])

  const statusOptions = useMemo(() => {
    const set = new Set<string>()
    items.forEach(item => { if (item.Status) set.add(item.Status) })
    return Array.from(set).sort()
  }, [items])

  const softwareTypeOptions = useMemo(() => {
    const set = new Set<string>()
    items.forEach(item => { if (item.LicenseType) set.add(item.LicenseType) })
    return Array.from(set).sort()
  }, [items])

  // Filtered items
  const filteredItems = useMemo(() => {
    const s = filters.search.toLowerCase()
    return items.filter(item => {
      if (filters.customer !== 'All' && item.Customer !== filters.customer) return false
      if (filters.site !== 'All' && filters.site && item.Site !== filters.site) return false
      if (filters.status !== 'All' && calculateLicenseStatus(item.ExpirationDate, item.ServicePlanExpiration) !== filters.status) return false
      if (filters.vendor !== 'All' && item.Vendor !== filters.vendor) return false
      if (filters.softwareType !== 'All' && item.LicenseType !== filters.softwareType) return false
      
      if (s) {
        const searchFields = [
          item.SoftwareName,
          item.SoftwareVersion,
          item.Customer,
          item.Site,
          item.Vendor,
          item.ServicePlan,
          item.LicenseKey,
          item.LicenseType
        ].filter(Boolean).join(' ').toLowerCase()
        
        if (!searchFields.includes(s)) return false
      }
      
      return true
    })
  }, [items, filters])

  const handleExportCSV = () => {
    const columns = [
      { key: 'LicenseID' as keyof License, label: 'License ID' },
      { key: 'Customer' as keyof License, label: 'Customer' },
      { key: 'Site' as keyof License, label: 'Site' },
      { key: 'SoftwareName' as keyof License, label: 'Software Name' },
      { key: 'SoftwareVersion' as keyof License, label: 'Version' },
      { key: 'LicenseType' as keyof License, label: 'License Type' },
      { key: 'LicenseKey' as keyof License, label: 'License Key' },
      { key: 'Vendor' as keyof License, label: 'Vendor' },
      { key: 'Status' as keyof (License & { Status: string }), label: 'Status' },
      { key: 'ServicePlan' as keyof License, label: 'Service Plan' },
      { key: 'ExpirationDate' as keyof License, label: 'Expiration Date' },
      { key: 'ServicePlanExpiration' as keyof License, label: 'Service Plan Expiration' },
      { key: 'Cost' as keyof License, label: 'Cost' },
      { key: 'Notes' as keyof License, label: 'Notes' }
    ]

    // Prepare data with calculated status
    const exportData = filteredItems.map(license => ({
      ...license,
      Status: calculateLicenseStatus(license.ExpirationDate, license.ServicePlanExpiration),
      ExpirationDate: formatDateForCSV(license.ExpirationDate || ''),
      ServicePlanExpiration: formatDateForCSV(license.ServicePlanExpiration || '')
    }))

    arrayToCSV(exportData, columns, 'software-licenses')
  }

  const hasActiveFilters = filters.search || filters.customer !== 'All' || filters.site !== 'All' || 
                          filters.status !== 'All' || filters.vendor !== 'All' || filters.softwareType !== 'All'

  return (
    <div className="card">
      <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16}}>
        <div className="title">Software Licenses</div>
        <button 
          onClick={startAddNew} 
          className="btn" 
          style={{fontSize: '14px', padding: '8px 16px', backgroundColor: '#00aa44'}}
        >
          + Add New License
        </button>
      </div>

      {/* Active Filters Display */}
      {hasActiveFilters && (
        <div style={{marginBottom: 12, padding: 8, background: '#17263f', borderRadius: 4, border: '1px solid #2a3a5f'}}>
          <div style={{display: 'flex', alignItems: 'center', gap: 8, flexWrap: 'wrap'}}>
            <span style={{color: '#9fb3ff', fontSize: '14px'}}>Active filters:</span>
            {filters.search && <span style={{ color: '#9fb3ff' }}>Search: "{filters.search}"</span>}
            {filters.customer !== 'All' && <span style={{ color: '#79e2b6' }}>Customer: {filters.customer}</span>}
            {filters.site !== 'All' && <span style={{ color: '#79e2b6' }}>Site: {filters.site}</span>}
            {filters.status !== 'All' && <span style={{ color: '#ffc78a' }}>Status: {filters.status}</span>}
            {filters.vendor !== 'All' && <span style={{ color: '#ff9999' }}>Vendor: {filters.vendor}</span>}
            {filters.softwareType !== 'All' && <span style={{ color: '#d4a5ff' }}>Type: {filters.softwareType}</span>}
          </div>
          <button 
            onClick={resetFilters}
            style={{
              marginTop: 4,
              background: 'transparent',
              border: '1px solid #9fb3ff',
              color: '#9fb3ff',
              padding: '2px 8px',
              fontSize: '12px',
              borderRadius: 3,
              cursor: 'pointer'
            }}
            title="Clear all filters"
          >
            Clear All Filters
          </button>
        </div>
      )}

      {/* Search and Filter Bar */}
      <div className="row" style={{gap:8, marginBottom:12}}>
        <div style={{flex:'1 1 200px'}}>
          <input 
            placeholder="🔍 Search licenses..." 
            value={filters.search} 
            onChange={e=>setFilter({search:e.target.value})} 
          />
        </div>
        <div style={{flex:'0 0 160px'}}>
          <select value={filters.customer} onChange={e=>setFilter({customer:e.target.value})}>
            <option value="All">Customer (All)</option>
            {customerOptions.map(c => <option key={c} value={c}>{c}</option>)}
          </select>
        </div>
        <div style={{flex:'0 0 160px'}}>
          <select value={filters.site} onChange={e=>setFilter({site:e.target.value})}>
            <option value="All">Site (All)</option>
            {siteOptions.map(s => <option key={s} value={s}>{s}</option>)}
          </select>
        </div>
        <div style={{flex:'0 0 140px'}}>
          <select value={filters.status} onChange={e=>setFilter({status:e.target.value})}>
            <option value="All">Status (All)</option>
            {statusOptions.map(s => <option key={s} value={s}>{s}</option>)}
          </select>
        </div>
        <div style={{flex:'0 0 140px'}}>
          <select value={filters.vendor} onChange={e=>setFilter({vendor:e.target.value})}>
            <option value="All">Vendor (All)</option>
            {vendorOptions.map(v => <option key={v} value={v}>{v}</option>)}
          </select>
        </div>
        <div style={{flex:'0 0 140px'}}>
          <select value={filters.softwareType} onChange={e=>setFilter({softwareType:e.target.value})}>
            <option value="All">Type (All)</option>
            {softwareTypeOptions.map(t => <option key={t} value={t}>{t}</option>)}
          </select>
        </div>
        <div>
          <button 
            className="primary" 
            onClick={handleExportCSV}
            style={{ padding: '8px 16px' }}
            title={`Export ${filteredItems.length} licenses to CSV`}
          >
            📊 Export CSV
          </button>
        </div>
      </div>

      <div style={{marginBottom: 10, display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>
        <strong>{filteredItems.length} of {items.length} licenses {hasActiveFilters ? 'match filters' : 'found'}</strong>
        <button 
          onClick={async () => {
            console.log('Manual status update triggered')
            const updated = await updateLicenseStatuses(items)
            if (updated) {
              refresh()
            } else {
              console.log('No status updates needed')
            }
          }} 
          className="btn"
          style={{fontSize: '12px', padding: '4px 8px'}}
        >
          Update Statuses
        </button>
      </div>

      <div className="table-container">
        <table>
          <thead>
            <tr>
              <th>Customer</th>
              <th>Site</th>
              <th>Software</th>
              <th>Version</th>
              <th>Type</th>
              <th>Count</th>
              <th>Used</th>
              <th>Expires</th>
              <th>Service Plan</th>
              <th>SP Expires</th>
              <th>Vendor</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredItems.map(item => (
              <tr key={item.LicenseID}>
                <td>{item.Customer}</td>
                <td>{item.Site}</td>
                <td>{item.SoftwareName}</td>
                <td>{item.SoftwareVersion || 'N/A'}</td>
                <td>{item.LicenseType}</td>
                <td>{item.LicenseCount}</td>
                <td>{item.UsedCount || 0}</td>
                <td>{formatDate(item.ExpirationDate)}</td>
                <td>{item.ServicePlan || 'N/A'}</td>
                <td>{formatDate(item.ServicePlanExpiration)}</td>
                <td>{item.Vendor || 'N/A'}</td>
                <td>
                  <span 
                    style={{
                      color: getStatusColor(item.Status || 'Active', item.ExpirationDate, item.ServicePlanExpiration),
                      fontWeight: 'bold'
                    }}
                  >
                    {item.Status || calculateLicenseStatus(item.ExpirationDate, item.ServicePlanExpiration)}
                  </span>
                </td>
                <td>
                  <div style={{display: 'flex', gap: '5px'}}>
                    <button onClick={() => startEdit(item)} className="btn" style={{fontSize: '12px', padding: '4px 8px'}}>Edit</button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      {filteredItems.length === 0 && (
        <div style={{textAlign: 'center', padding: '20px', color: '#666'}}>
          {items.length === 0 
            ? 'No licenses found. Add your first software license above.'
            : 'No licenses match the current filters. Try adjusting your search criteria.'
          }
        </div>
      )}
      
      <LicenseEditModal
        license={editingLicense}
        customers={customers}
        sites={sites}
        isOpen={isEditModalOpen}
        onClose={closeEditModal}
        onSave={saveEdit}
        onDelete={deleteLicenseHandler}
      />
    </div>
  )
}